<!-- MAKE SURE TO RENAME THE PROJECT -->
<project default="main">
    <property environment="env"/>
    <!-- Properties -->
    <!-- Generic Shit -->
    <property name="build.dir" value="build"/>
    <property name="src.dir" value="src"/>
    <property name="resources.dir" value="resources"/>
    <property name="download.dir" value="download"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="bin"/>
    <property name="forge.dir" value="${build.dir}/forge"/>
    <property name="mcp.dir" value="${forge.dir}/mcp"/>
    <property name="mcpsrc.dir" value="${mcp.dir}/src"/>
    <!-- import from file -->
    <loadproperties srcFile="mod.properties"/>
    <property name="forge.name" value="minecraftforge-src-${mc.version}-${forge.version}.zip"/>
    
    <available property="forge-exists" file="${download.dir}/${forge.name}"/>
    <available file="${src.dir}/.git" type="dir" property="git.present"/>

    <condition property="out-of-date">
        <not>
            <and>
                <available file="${download.dir}/${forge.name}"/>
                <available file="${mcpsrc.dir}"/>
            </and>
        </not>
    </condition>
    
    <condition property="doessignjar">
        <available file="keystore.properties"/>
    </condition>
    
    <condition property="doesfullforge">
        <available file="build.zip"/>
    </condition>

    <mkdir dir="${download.dir}"/>

    <!-- Targets -->

    <!-- override these in the main script for custom stuff -->
    <target name="-preclean"/>
    <target name="-preforge"/>
    <target name="-postforge"/>
    <target name="-precompile"/>
    <target name="-prepackage"/>
    <target name="-preresources"/>
    <target name="-postbuild"/>
    <target name="-downloads"/>

    <!-- Clear build directory -->
    <target name="clean" depends="-preclean">
        <delete dir="${build.dir}"/>
        <delete dir="${download.dir}"/>
        <mkdir dir="${download.dir}"/>
    </target>

    <!-- Set full version -->
    <target name="initialize-version" depends="version-provided,version-not-provided,git.revision">
        <property name="project.version.full" value="${project.version}.${build.number}"/>
    </target>

    <!-- Set unknown build number -->
    <target name="version-not-provided" unless="env.BUILD_NUMBER">
        <buildnumber/>
        <echo message="Setting build number to ${build.number}"/>
    </target>

    <!-- Set build number from environment -->
    <target name="version-provided" if="env.BUILD_NUMBER">
        <property name="build.number" value="${env.BUILD_NUMBER}"/>
        <echo message="Setting build number to ${build.number}"/>
    </target>
	
    <target name="git.revision" if="git.present">
        <exec executable="git" dir="${src.dir}" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="describe"/>
            <arg value="--tags"/>
            <arg value="--always"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="project.version" value="${git.revision}" else="0.0.0">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
    </target>	

    <!-- Setup mcp and forge -->
    <target name="setup" depends="-preforge" if="out-of-date">
        
        <antcall target="buildzip"/>
        <antcall target="fullForge"/>
    </target>
    
    <target name="buildzip" if="doesfullforge">
        <!-- This is for my personal enviornment. build.zip contains everything required so I don't have to waste cpw's bandwidth while testing. -->
        <echo message="build.zip detected. Skipping Forge setup."/>
        <unzip dest="${build.dir}" src="build.zip"/>
        <unzip dest="${download.dir}" src="download.zip"/>
        <antcall target="-postforge"/>
    </target>
    
    <target name="fullForge" unless="doesfullforge">
        <get src="http://files.minecraftforge.net/${forge.name}" dest="${download.dir}" usetimestamp="True"/>
        <get src="https://github.com/denoflionsx/denLib/archive/master.zip" dest="${download.dir}/denLib-3.X.zip" usetimestamp="True"/>
        <get src="https://dl.dropboxusercontent.com/u/23892866/Downloads/SpriteSheetConverter.jar" dest="${download.dir}/SpriteSheetConverter.jar"/>
        <get src="https://dl.dropboxusercontent.com/u/23892866/Downloads/AnimationConverter.jar" dest="${download.dir}/AnimationConverter.jar"/>
        <antcall target="-downloads"/>
        <delete dir="${forge.dir}" failonerror="false"/>

        <unzip dest="${forge.dir}/.." src="${download.dir}/${forge.name}"/>
        <unzip dest="${download.dir}" src="${download.dir}/denLib-3.X.zip"/>
        <!-- Fix executable permissions -->
        <chmod dir="${forge.dir}" perm="ugo+rx" includes="**.sh"/>

        <mkdir dir="${forge.dir}/accesstransformers"/>
        <copy todir="${forge.dir}/accesstransformers">
            <fileset file="${download.dir}/denLib-master/denLib_at.cfg"/>
        </copy>

        <!-- Install forge -->
        <exec dir="${forge.dir}" executable="cmd" osfamily="windows">
            <arg line="/c install.cmd"/>
        </exec>

        <exec dir="${forge.dir}" executable="sh" osfamily="unix">
            <arg value="install.sh"/>
        </exec>
        <echo message="Backing up new forge build..."/>
        <zip destfile="build.zip" basedir="build"/>
        <zip destfile="download.zip" basedir="download"/>
        <antcall target="-postforge"/>
    </target>

    <target name="copy-src">
        <!-- Copy sources -->
        
        <copy todir="${mcpsrc.dir}/minecraft">
            <fileset dir="${src.dir}"/>
            <filterset>
                <filter token="NAME" value="${ant.project.name}"/>
                <filter token="VERSION" value="${project.version.full}" />
                <filter token="BUILD" value="${build.number}" />
                <filter token="DEPENDS" value="${depends.annotation}"/>
                <filter token="PROXYCLIENT" value="${proxy.client}"/>
                <filter token="PROXYSERVER" value="${proxy.common}"/>
                
            </filterset>
        </copy>
        <echo message="Name set to ${ant.project.name}"/>
        <echo message="Version set to ${project.version.full}"/>
        <echo message="Depends set to ${depends.annotation}"/>
        <echo message="ProxyClient set to ${proxy.client}"/>
        <echo message="ProxyCommon set to ${proxy.common}"/>

        <copy todir="${mcpsrc.dir}/minecraft">
            <fileset dir="${download.dir}/denLib-master/src"/>
        </copy>
    </target>
    
    <target name="reobf_srg" unless="coremod.srg">
        <exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
            <arg line="/c reobfuscate_srg.bat"/>
        </exec>

        <exec dir="${mcp.dir}" executable="sh" osfamily="unix">
            <arg value="reobfuscate_srg.sh"/>
        </exec>
    </target>
    
    <target name="reobf" if="coremod.srg">
        <exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
            <arg line="/c reobfuscate.bat"/>
        </exec>

        <exec dir="${mcp.dir}" executable="sh" osfamily="unix">
            <arg value="reobfuscate.sh"/>
        </exec>
    </target>

    <target name="compile" depends="initialize-version,setup,copy-src,-precompile">

        <delete dir="${classes.dir}"/>
        <mkdir dir="${classes.dir}"/>

        <!-- Recompile -->
        <exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
            <arg line="/c recompile.bat"/>
        </exec>

        <exec dir="${mcp.dir}" executable="sh" osfamily="unix">
            <arg value="recompile.sh"/>
        </exec>
		
        <!-- Check for failure -->
        <fail message="MCP failed to build">
            <condition>
                <resourcecontains resource="${mcp.dir}/logs/client_compile.log" substring="error:"/>
            </condition>
        </fail>
		
        <!-- Reobfuscate -->
        <antcall target="reobf_srg"/>
        <antcall target="reobf"/>

        <!-- Copy classes -->
        <copy todir="${classes.dir}">
            <fileset dir="${mcp.dir}/reobf/minecraft"/>
        </copy>
        
        <antcall target="-preresources"/>

        <!-- Copy resources -->
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}">
                <exclude name="build.xml"/>
            </fileset>
        </copy>
                
        <delete dir="${classes.dir}/forestry"/>
        <delete dir="${classes.dir}/powercrystals"/>
        <delete dir="${classes.dir}/cofh"/>
        <delete dir="${classes.dir}/mods/Railcraft"/>
        <delete dir="${classes.dir}/mods/tinker"/>
        <delete dir="${classes.dir}/thermalexpansion"/>
        <delete dir="${classes.dir}/buildcraft"/>
        <delete dir="${classes.dir}/dan200"/>
        <delete dir="${classes.dir}/com"/>
        <delete dir="${classes.dir}/ic2"/>

        <!-- Reset src dir to post-forge-install state -->
        <delete dir="${mcpsrc.dir}/minecraft/denoflionsx"/>
        <delete dir="${mcpsrc.dir}/minecraft/forestry"/>
        <delete dir="${mcpsrc.dir}/minecraft/powercrystals"/>
        <delete dir="${mcpsrc.dir}/minecraft/cofh"/>
        <delete dir="${mcpsrc.dir}/minecraft/mods"/>
        <delete dir="${mcpsrc.dir}/minecraft/thermalexpansion"/>
        <delete dir="${mcpsrc.dir}/minecraft/buildcraft"/>
        <delete dir="${mcpsrc.dir}/dan200"/>
        <delete dir="${mcpsrc.dir}/com"/>
        <delete dir="${mcpsrc.dir}/ic2"/>
    </target>

    <!-- Package the compiled files -->
    <target name="package" depends="compile">
        <antcall target="-prepackage"/>
        <delete dir="${classes.dir}/denoflionsx/denLib"/>
        <delete dir="${jar.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <antcall target="CoreMod"/>
        <antcall target="Mod"/>
        <jar manifest="MANIFEST.MF" destfile="${jar.dir}/${ant.project.name}-${mc.version}-${project.version.full}.jar" basedir="${classes.dir}"/>
    </target>
    
    <target name="sign" if="doessignjar">
        <loadproperties srcFile="keystore.properties"/>
        <signjar jar="${jar.dir}/${ant.project.name}-${mc.version}-${project.version.full}.jar" keystore="${keystore.file}" alias="${keystore.alias}" storepass="${keystore.password}" keypass="${keystore.password}" verbose="true"/>
    </target>
    
    <target name="CoreMod" if="coremod.isCoreMod">
        <manifest file="MANIFEST.MF">
            <attribute name="FMLCorePlugin" value="${coremod.plugin}"/>
        </manifest>
    </target>
    
    <target name="Mod" unless="coremod.isCoreMod">
        <manifest file="MANIFEST.MF">
            <attribute name="Mod" value="${ant.project.name}"/>
        </manifest>
    </target>

    <!-- Default target to run -->
    <target name="main" depends="package">
        <antcall target="-postbuild"/>
        <antcall target="sign"/>
    </target>
        
    <target name="jar" depends="main"/>

</project>